<class>
<keyword> class </keyword>
<identifier> Square, category: class, index: no index, context: defined </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x, category: field, index: 0, context: defined </identifier>
<symbol> , </symbol>
<identifier> y, category: field, index: 1, context: defined </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> size, category: field, index: 2, context: defined </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Square, category: class, index: no index, context: used </identifier>
<identifier> new, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Ax, category: arg, index: 0, context: defined </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay, category: arg, index: 1, context: defined </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Asize, category: arg, index: 2, context: defined </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x, category: field, index: 0, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ax, category: arg, index: 0, context: used </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y, category: field, index: 1, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ay, category: arg, index: 1, context: used </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> size, category: field, index: 2, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Asize, category: arg, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> deAlloc, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> erase, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> incSize, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 254 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 510 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> erase, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> size, category: field, index: 2, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> decSize, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> erase, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> size, category: field, index: 2, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveUp, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y, category: field, index: 1, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveDown, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 254 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y, category: field, index: 1, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveLeft, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x, category: field, index: 0, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveRight, category: subroutine, index: no index, context: defined </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 510 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x, category: field, index: 0, context: defined </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> setColor, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, category: class, index: no index, context: used </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, category: subroutine, index: no index, context: used </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x, category: field, index: 0, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y, category: field, index: 1, context: used </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> size, category: field, index: 2, context: used </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>